// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: ctp.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RangeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  int64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End    int64  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *RangeReq) Reset() {
	*x = RangeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeReq) ProtoMessage() {}

func (x *RangeReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeReq.ProtoReflect.Descriptor instead.
func (*RangeReq) Descriptor() ([]byte, []int) {
	return file_ctp_proto_rawDescGZIP(), []int{0}
}

func (x *RangeReq) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RangeReq) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *RangeReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type KlineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  int64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End    int64  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Bin    string `protobuf:"bytes,4,opt,name=bin,proto3" json:"bin,omitempty"`
}

func (x *KlineReq) Reset() {
	*x = KlineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineReq) ProtoMessage() {}

func (x *KlineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineReq.ProtoReflect.Descriptor instead.
func (*KlineReq) Descriptor() ([]byte, []int) {
	return file_ctp_proto_rawDescGZIP(), []int{1}
}

func (x *KlineReq) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *KlineReq) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *KlineReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *KlineReq) GetBin() string {
	if x != nil {
		return x.Bin
	}
	return ""
}

type KlineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    int64   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Open     float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High     float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Close    float64 `protobuf:"fixed64,4,opt,name=close,proto3" json:"close,omitempty"`
	Low      float64 `protobuf:"fixed64,5,opt,name=low,proto3" json:"low,omitempty"`
	Volume   uint64  `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
	Turnover float64 `protobuf:"fixed64,7,opt,name=turnover,proto3" json:"turnover,omitempty"`
}

func (x *KlineData) Reset() {
	*x = KlineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineData) ProtoMessage() {}

func (x *KlineData) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineData.ProtoReflect.Descriptor instead.
func (*KlineData) Descriptor() ([]byte, []int) {
	return file_ctp_proto_rawDescGZIP(), []int{2}
}

func (x *KlineData) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *KlineData) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *KlineData) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *KlineData) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *KlineData) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *KlineData) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *KlineData) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

type KlineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*KlineData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *KlineResp) Reset() {
	*x = KlineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineResp) ProtoMessage() {}

func (x *KlineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineResp.ProtoReflect.Descriptor instead.
func (*KlineResp) Descriptor() ([]byte, []int) {
	return file_ctp_proto_rawDescGZIP(), []int{3}
}

func (x *KlineResp) GetData() []*KlineData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts                 int64   `protobuf:"varint,1,opt,name=Ts,proto3" json:"Ts,omitempty"`
	TradingDay         string  `protobuf:"bytes,2,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	InstrumentID       string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID         string  `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeInstID     string  `protobuf:"bytes,5,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ActionDay          string  `protobuf:"bytes,6,opt,name=ActionDay,proto3" json:"ActionDay,omitempty"`
	LastPrice          float64 `protobuf:"fixed64,7,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,8,opt,name=PreSettlementPrice,proto3" json:"PreSettlementPrice,omitempty"`
	PreClosePrice      float64 `protobuf:"fixed64,9,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	PreOpenInterest    float64 `protobuf:"fixed64,10,opt,name=PreOpenInterest,proto3" json:"PreOpenInterest,omitempty"`
	OpenPrice          float64 `protobuf:"fixed64,11,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	HighestPrice       float64 `protobuf:"fixed64,12,opt,name=HighestPrice,proto3" json:"HighestPrice,omitempty"`
	LowestPrice        float64 `protobuf:"fixed64,13,opt,name=LowestPrice,proto3" json:"LowestPrice,omitempty"`
	Volume             int64   `protobuf:"varint,14,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Turnover           float64 `protobuf:"fixed64,15,opt,name=Turnover,proto3" json:"Turnover,omitempty"`
	OpenInterest       float64 `protobuf:"fixed64,16,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	ClosePrice         float64 `protobuf:"fixed64,17,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
	SettlementPrice    float64 `protobuf:"fixed64,18,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	UpperLimitPrice    float64 `protobuf:"fixed64,19,opt,name=UpperLimitPrice,proto3" json:"UpperLimitPrice,omitempty"`
	LowerLimitPrice    float64 `protobuf:"fixed64,20,opt,name=LowerLimitPrice,proto3" json:"LowerLimitPrice,omitempty"`
	PreDelta           float64 `protobuf:"fixed64,21,opt,name=PreDelta,proto3" json:"PreDelta,omitempty"`
	CurrDelta          float64 `protobuf:"fixed64,22,opt,name=CurrDelta,proto3" json:"CurrDelta,omitempty"`
	BidPrice1          float64 `protobuf:"fixed64,23,opt,name=BidPrice1,proto3" json:"BidPrice1,omitempty"`
	BidVolume1         int64   `protobuf:"varint,24,opt,name=BidVolume1,proto3" json:"BidVolume1,omitempty"`
	AskPrice1          float64 `protobuf:"fixed64,25,opt,name=AskPrice1,proto3" json:"AskPrice1,omitempty"`
	AskVolume1         int64   `protobuf:"varint,26,opt,name=AskVolume1,proto3" json:"AskVolume1,omitempty"`
	BidPrice2          float64 `protobuf:"fixed64,27,opt,name=BidPrice2,proto3" json:"BidPrice2,omitempty"`
	BidVolume2         int64   `protobuf:"varint,28,opt,name=BidVolume2,proto3" json:"BidVolume2,omitempty"`
	AskPrice2          float64 `protobuf:"fixed64,29,opt,name=AskPrice2,proto3" json:"AskPrice2,omitempty"`
	AskVolume2         int64   `protobuf:"varint,30,opt,name=AskVolume2,proto3" json:"AskVolume2,omitempty"`
	BidPrice3          float64 `protobuf:"fixed64,31,opt,name=BidPrice3,proto3" json:"BidPrice3,omitempty"`
	BidVolume3         int64   `protobuf:"varint,32,opt,name=BidVolume3,proto3" json:"BidVolume3,omitempty"`
	AskPrice3          float64 `protobuf:"fixed64,33,opt,name=AskPrice3,proto3" json:"AskPrice3,omitempty"`
	AskVolume3         int64   `protobuf:"varint,34,opt,name=AskVolume3,proto3" json:"AskVolume3,omitempty"`
	BidPrice4          float64 `protobuf:"fixed64,35,opt,name=BidPrice4,proto3" json:"BidPrice4,omitempty"`
	BidVolume4         int64   `protobuf:"varint,36,opt,name=BidVolume4,proto3" json:"BidVolume4,omitempty"`
	AskPrice4          float64 `protobuf:"fixed64,37,opt,name=AskPrice4,proto3" json:"AskPrice4,omitempty"`
	AskVolume4         int64   `protobuf:"varint,38,opt,name=AskVolume4,proto3" json:"AskVolume4,omitempty"`
	BidPrice5          float64 `protobuf:"fixed64,39,opt,name=BidPrice5,proto3" json:"BidPrice5,omitempty"`
	BidVolume5         int64   `protobuf:"varint,40,opt,name=BidVolume5,proto3" json:"BidVolume5,omitempty"`
	AskPrice5          float64 `protobuf:"fixed64,41,opt,name=AskPrice5,proto3" json:"AskPrice5,omitempty"`
	AskVolume5         int64   `protobuf:"varint,42,opt,name=AskVolume5,proto3" json:"AskVolume5,omitempty"`
	AveragePrice       float64 `protobuf:"fixed64,43,opt,name=AveragePrice,proto3" json:"AveragePrice,omitempty"`
}

func (x *MarketData) Reset() {
	*x = MarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketData) ProtoMessage() {}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketData.ProtoReflect.Descriptor instead.
func (*MarketData) Descriptor() ([]byte, []int) {
	return file_ctp_proto_rawDescGZIP(), []int{4}
}

func (x *MarketData) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *MarketData) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *MarketData) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *MarketData) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *MarketData) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *MarketData) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

func (x *MarketData) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *MarketData) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *MarketData) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *MarketData) GetPreOpenInterest() float64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *MarketData) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *MarketData) GetHighestPrice() float64 {
	if x != nil {
		return x.HighestPrice
	}
	return 0
}

func (x *MarketData) GetLowestPrice() float64 {
	if x != nil {
		return x.LowestPrice
	}
	return 0
}

func (x *MarketData) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketData) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *MarketData) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *MarketData) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *MarketData) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *MarketData) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *MarketData) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *MarketData) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *MarketData) GetCurrDelta() float64 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *MarketData) GetBidPrice1() float64 {
	if x != nil {
		return x.BidPrice1
	}
	return 0
}

func (x *MarketData) GetBidVolume1() int64 {
	if x != nil {
		return x.BidVolume1
	}
	return 0
}

func (x *MarketData) GetAskPrice1() float64 {
	if x != nil {
		return x.AskPrice1
	}
	return 0
}

func (x *MarketData) GetAskVolume1() int64 {
	if x != nil {
		return x.AskVolume1
	}
	return 0
}

func (x *MarketData) GetBidPrice2() float64 {
	if x != nil {
		return x.BidPrice2
	}
	return 0
}

func (x *MarketData) GetBidVolume2() int64 {
	if x != nil {
		return x.BidVolume2
	}
	return 0
}

func (x *MarketData) GetAskPrice2() float64 {
	if x != nil {
		return x.AskPrice2
	}
	return 0
}

func (x *MarketData) GetAskVolume2() int64 {
	if x != nil {
		return x.AskVolume2
	}
	return 0
}

func (x *MarketData) GetBidPrice3() float64 {
	if x != nil {
		return x.BidPrice3
	}
	return 0
}

func (x *MarketData) GetBidVolume3() int64 {
	if x != nil {
		return x.BidVolume3
	}
	return 0
}

func (x *MarketData) GetAskPrice3() float64 {
	if x != nil {
		return x.AskPrice3
	}
	return 0
}

func (x *MarketData) GetAskVolume3() int64 {
	if x != nil {
		return x.AskVolume3
	}
	return 0
}

func (x *MarketData) GetBidPrice4() float64 {
	if x != nil {
		return x.BidPrice4
	}
	return 0
}

func (x *MarketData) GetBidVolume4() int64 {
	if x != nil {
		return x.BidVolume4
	}
	return 0
}

func (x *MarketData) GetAskPrice4() float64 {
	if x != nil {
		return x.AskPrice4
	}
	return 0
}

func (x *MarketData) GetAskVolume4() int64 {
	if x != nil {
		return x.AskVolume4
	}
	return 0
}

func (x *MarketData) GetBidPrice5() float64 {
	if x != nil {
		return x.BidPrice5
	}
	return 0
}

func (x *MarketData) GetBidVolume5() int64 {
	if x != nil {
		return x.BidVolume5
	}
	return 0
}

func (x *MarketData) GetAskPrice5() float64 {
	if x != nil {
		return x.AskPrice5
	}
	return 0
}

func (x *MarketData) GetAskVolume5() int64 {
	if x != nil {
		return x.AskVolume5
	}
	return 0
}

func (x *MarketData) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

type MarketDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketDatas) Reset() {
	*x = MarketDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDatas) ProtoMessage() {}

func (x *MarketDatas) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDatas.ProtoReflect.Descriptor instead.
func (*MarketDatas) Descriptor() ([]byte, []int) {
	return file_ctp_proto_rawDescGZIP(), []int{5}
}

func (x *MarketDatas) GetData() []*MarketData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_ctp_proto protoreflect.FileDescriptor

var file_ctp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x74, 0x70,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x5c, 0x0a, 0x08, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62,
	0x69, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x09, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x74, 0x70, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x0b, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x54, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x72, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x75, 0x72, 0x6e,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x33, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x33, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x34, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x3c, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12,
	0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x74, 0x70, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xa3,
	0x01, 0x0a, 0x03, 0x43, 0x74, 0x70, 0x12, 0x4d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4b, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x74, 0x70, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x62, 0x2e, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x74,
	0x70, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f,
	0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x17, 0x2e, 0x63, 0x74, 0x70, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x74, 0x70, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f,
	0x74, 0x69, 0x63, 0x6b, 0x42, 0x0f, 0x5a, 0x0d, 0x63, 0x74, 0x70, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ctp_proto_rawDescOnce sync.Once
	file_ctp_proto_rawDescData = file_ctp_proto_rawDesc
)

func file_ctp_proto_rawDescGZIP() []byte {
	file_ctp_proto_rawDescOnce.Do(func() {
		file_ctp_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctp_proto_rawDescData)
	})
	return file_ctp_proto_rawDescData
}

var file_ctp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ctp_proto_goTypes = []interface{}{
	(*RangeReq)(nil),    // 0: ctpmonitor.pb.RangeReq
	(*KlineReq)(nil),    // 1: ctpmonitor.pb.KlineReq
	(*KlineData)(nil),   // 2: ctpmonitor.pb.KlineData
	(*KlineResp)(nil),   // 3: ctpmonitor.pb.KlineResp
	(*MarketData)(nil),  // 4: ctpmonitor.pb.MarketData
	(*MarketDatas)(nil), // 5: ctpmonitor.pb.MarketDatas
}
var file_ctp_proto_depIdxs = []int32{
	2, // 0: ctpmonitor.pb.KlineResp.data:type_name -> ctpmonitor.pb.KlineData
	4, // 1: ctpmonitor.pb.MarketDatas.data:type_name -> ctpmonitor.pb.MarketData
	1, // 2: ctpmonitor.pb.Ctp.GetKline:input_type -> ctpmonitor.pb.KlineReq
	0, // 3: ctpmonitor.pb.Ctp.GetTick:input_type -> ctpmonitor.pb.RangeReq
	3, // 4: ctpmonitor.pb.Ctp.GetKline:output_type -> ctpmonitor.pb.KlineResp
	5, // 5: ctpmonitor.pb.Ctp.GetTick:output_type -> ctpmonitor.pb.MarketDatas
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ctp_proto_init() }
func file_ctp_proto_init() {
	if File_ctp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ctp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KlineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KlineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KlineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ctp_proto_goTypes,
		DependencyIndexes: file_ctp_proto_depIdxs,
		MessageInfos:      file_ctp_proto_msgTypes,
	}.Build()
	File_ctp_proto = out.File
	file_ctp_proto_rawDesc = nil
	file_ctp_proto_goTypes = nil
	file_ctp_proto_depIdxs = nil
}
