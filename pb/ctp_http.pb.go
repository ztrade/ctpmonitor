// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.4
// source: ctp.proto

package pb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCtpGetKline = "/ctpmonitor.pb.Ctp/GetKline"
const OperationCtpGetTick = "/ctpmonitor.pb.Ctp/GetTick"

type CtpHTTPServer interface {
	GetKline(context.Context, *KlineReq) (*KlineResp, error)
	GetTick(context.Context, *RangeReq) (*MarketDatas, error)
}

func RegisterCtpHTTPServer(s *http.Server, srv CtpHTTPServer) {
	r := s.Route("/")
	r.GET("/kline", _Ctp_GetKline0_HTTP_Handler(srv))
	r.GET("/tick", _Ctp_GetTick0_HTTP_Handler(srv))
}

func _Ctp_GetKline0_HTTP_Handler(srv CtpHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in KlineReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCtpGetKline)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKline(ctx, req.(*KlineReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*KlineResp)
		return ctx.Result(200, reply)
	}
}

func _Ctp_GetTick0_HTTP_Handler(srv CtpHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RangeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCtpGetTick)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTick(ctx, req.(*RangeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarketDatas)
		return ctx.Result(200, reply)
	}
}

type CtpHTTPClient interface {
	GetKline(ctx context.Context, req *KlineReq, opts ...http.CallOption) (rsp *KlineResp, err error)
	GetTick(ctx context.Context, req *RangeReq, opts ...http.CallOption) (rsp *MarketDatas, err error)
}

type CtpHTTPClientImpl struct {
	cc *http.Client
}

func NewCtpHTTPClient(client *http.Client) CtpHTTPClient {
	return &CtpHTTPClientImpl{client}
}

func (c *CtpHTTPClientImpl) GetKline(ctx context.Context, in *KlineReq, opts ...http.CallOption) (*KlineResp, error) {
	var out KlineResp
	pattern := "/kline"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCtpGetKline))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CtpHTTPClientImpl) GetTick(ctx context.Context, in *RangeReq, opts ...http.CallOption) (*MarketDatas, error) {
	var out MarketDatas
	pattern := "/tick"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCtpGetTick))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
